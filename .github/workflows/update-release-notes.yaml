name: Update release notes
on:
  repository_dispatch:
    types: [update-release-notes]

jobs:
  update-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1 
      - run: |
          mkdir -p ${{ github.workspace }}/content/${{ github.event.client_payload.product }}/release-notes/
      - name: Create release notes list
        id: release-note-list
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const templatePath = '${{ github.workspace }}/.github/templates/template.md';
            const filePath = '${{ github.workspace }}/content/${{ github.event.client_payload.product }}/release-notes/${{ github.event.client_payload.application-name }}-${{ github.event.client_payload.sha }}.md';
            const templateFile = fs.readFileSync(templatePath, 'utf8');
           
            const fileContent = templateFile
              .replace('<title>', '${{ github.event.client_payload.product }}')
              .replace('<date>', '${{ github.event.client_payload.date }}')
              .replace('<issues>', `\n${{ github.event.client_payload.release-notes }}`);

            fs.writeFileSync(filePath, fileContent, 'utf8');  

      - name: Generate token for release notes app
        uses: actions/github-script@v7
        id: release-notes-app-token
        env:
          GH_APP_ID: ${{ secrets.GH_APP_RELEASE_NOTES_UPDATER_APP_ID }}
          GH_APP_PRIVATE_KEY: ${{ secrets.GH_APP_RELEASE_NOTES_UPDATER_PRIVATE_KEY }}
          INSTALLATION_ID: ${{ secrets.GH_APP_RELEASE_NOTES_UPDATER_INSTALLATION_ID }}
        with:
          script: |
            const { createAppAuth } = require("@octokit/auth-app");

            const auth = createAppAuth({
              appId: +process.env.GH_APP_ID,
              privateKey: process.env.GH_APP_PRIVATE_KEY
            });

            const { token } = await auth({ type: "installation", installationId: +process.env.INSTALLATION_ID });

            core.setSecret(token);
            core.setOutput('token', token);
          result-encoding: string

      - name: Create release notes pull request
        id: create-pull-request
        uses: peter-evans/create-pull-request@153407881ec5c347639a548ade7d8ad1d6740e38 # pin@v5.0.2
        with:
          commit-message: "New release notes for ${{ github.event.client_payload.application-name }}"
          branch: release-notes-${{ github.event.client_payload.application-name }}
          branch-suffix: random
          title: "New release notes for ${{ github.event.client_payload.application-name }}"
          delete-branch: true

      - name: Auto approve
        if: ${{ steps.create-pull-request.outputs.pull-request-operation == 'created' }}
        run: gh pr review --approve "${{ steps.create-pull-request.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ steps.release-notes-app-token.outputs.token }}
      
      - name: Pull Request Activate Automerge
        if: ${{ steps.create-pull-request.outputs.pull-request-operation == 'created' }}
        run: |
          sleep 3
          gh pr merge --squash --auto --delete-branch "${{ steps.create-pull-request.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
